//GameStatus UI

<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>gamestatus</class>
 <widget class="QDialog" name="gamestatus">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>578</width>
    <height>345</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Dialog</string>
  </property>
  <widget class="QPushButton" name="currentgame">
   <property name="geometry">
    <rect>
     <x>340</x>
     <y>170</y>
     <width>171</width>
     <height>61</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));</string>
   </property>
   <property name="text">
    <string>Continue Current Game</string>
   </property>
  </widget>
  <widget class="QPushButton" name="newgame">
   <property name="geometry">
    <rect>
     <x>20</x>
     <y>170</y>
     <width>171</width>
     <height>61</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));</string>
   </property>
   <property name="text">
    <string>New Game</string>
   </property>
  </widget>
  <widget class="QLabel" name="welcomemsg">
   <property name="geometry">
    <rect>
     <x>30</x>
     <y>40</y>
     <width>521</width>
     <height>81</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <pointsize>28</pointsize>
     <weight>75</weight>
     <italic>true</italic>
     <bold>true</bold>
     <strikeout>false</strikeout>
     <kerning>true</kerning>
    </font>
   </property>
   <property name="text">
    <string/>
   </property>
  </widget>
  <widget class="QPushButton" name="goback">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>310</y>
     <width>111</width>
     <height>31</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <pointsize>18</pointsize>
     <weight>75</weight>
     <italic>true</italic>
     <bold>true</bold>
    </font>
   </property>
   <property name="styleSheet">
    <string notr="true">background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));</string>
   </property>
   <property name="text">
    <string>&lt;- Go BACK</string>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>



//GameStatus header
#ifndef gamestatus_H
#define gamestatus_H

#include <QMainWindow>
#include <QDialog>
#include <QtSql>
#include <QtDebug>
#include <QFileInfo>



namespace Ui {
class gamestatus;
}

class gamestatus : public QDialog
{
    Q_OBJECT

public:
    explicit gamestatus(QWidget *parent = 0);
    ~gamestatus();


private slots:
    void on_newgame_clicked();
    void on_goback_clicked();
    void on_currentgame_clicked();


private:
    Ui::gamestatus *ui;

};

#endif // gamestatus_H

//GameStatus cpp
#include "gamestatus.h"
#include "ui_gamestatus.h"
#include "walls.h"
#include "multiplayerlogin.h"
#include "loginuser.h"
#include <QPushButton>
#include "validatemoves.h"
#include <QtGui>
#include <QTime>
#include <QTimer>
#include <QWidget>
#include <QtCore>
#include <QTableWidget>
#include <unistd.h>
#include <QThread>
#include "savemoves.h"
#include <QMessageBox>
#include <QObject>
#include "buttonsheader.h"
#include "screenwindow.h"
#include <QDebug>
#include <QMediaPlayer>


validatemoves *valid = new validatemoves;
extern QString player1username, player2username;
void validate(walls *temp, int c,QWidget *baseWidget);
void disOrange();
static QString position,newposition,piecename,pieceColour,piecePresent,playersturn,saveposition;





int count=0, turn=1, expw[60], max=0;


int wR,wC,bR,bC;
walls *click1;
walls *temp;
walls *tile[8][8] = { { NULL } };

void walls::mousePressEvent(QMouseEvent *event)
{
    QWidget *baseWidget=nullptr;
    validate(this,++count,baseWidget);
}


gamestatus::gamestatus(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::gamestatus)
{
    ui->setupUi(this);
    ui->welcomemsg->setText("WELCOME TO CAPTURE THE ENEMY");

}

gamestatus::~gamestatus()
{
    delete ui;
}


class Border
{
public:
    Border();
    void outline(QWidget *baseWidget, int xPos, int yPos, int Pos)
    {
         QLabel *outLabel = new QLabel(baseWidget);

        if(!Pos)
            outLabel->setGeometry(xPos,yPos,552,20);        //Horizontal Borders

        else
            outLabel->setGeometry(xPos,yPos,20,512);        //Vertical Borders

        outLabel->setStyleSheet("QLabel { background-color :rgb(170, 170, 127); color : black; }");
    }

};


//performs what the undo function should do.
void buttonsheader::DeletedataSaved() //calls the slot funtion from buttonsheader.h
{

    savemoves connection; // This calls the connection from savemoves
    connection.connOpen(); // open the connection
    QSqlQuery* savequery= new QSqlQuery(connection.pdatabase); //opens a new connection to the database
    QSqlQuery* savequery2= new QSqlQuery(connection.pdatabase); //
    savequery->prepare("Delete from savemoves where username='"+player1username+"'"); // when you login, it grabs the username you used to login with on multiplayer. if it is found in databsae, deletes all records of player 1 in tables
    savequery2->prepare("Delete from savemoves where username='"+player2username+"'"); // same thing for player 2
    if (savequery->exec()) //if player 1 query has been executed, output message box
    {
        if (savequery2->exec())
        {
            QMessageBox message;
            message.setText(" YOUR GAME HAS BEEN DELETED");
            message.exec();
            connection.connClose(); // Closes connection to database
        }
        else // if query cant be executed, output message box
        {
            QMessageBox message;
            message.setText("UNABLE TO DELETE YOUR GAME");
            message.exec();
        }


    }


}

//performs what the go back function should do
void buttonsheader::gogoback()
{

    gamestatus *gaming;
    gaming = new gamestatus;
    gaming->show();
}

//performs what the save function should do
void buttonsheader::Save()
{
    int i, j;
    //connects the to the savemoves database connectiion
    savemoves connection;
    bool gamesaved=false;
    bool updatedgame=false;
    connection.connOpen();
    QSqlQuery* savequery1= new QSqlQuery(connection.pdatabase);
    if(savequery1->exec("select * from savemoves where username ='"+player1username+"' or username ='"+player2username+"'"))
    {
        int count=0;
        while(savequery1->next())
        {
             count++;
        }
        if (count<1)
        {
            for(i=0;i<8;i++)
            {
                for(j=0;j<8;j++)
                {
                    //saving just the piece characteristics that is present on the board.
                    if (tile[i][j]->piece==1)
                    {
                        //converting the white piecolour from integer=1 to string'W' to store in the database.
                        if (tile[i][j]->pieceColor==1)
                        {
                            pieceColour="W";
                            //if white asssign player1username to playersturn
                            playersturn=player1username;

                        }
                        else if (tile[i][j]->pieceColor==0)
                        {
                            pieceColour="B";
                            //if white asssign player2username to playersturn
                            playersturn=player2username;
                        }

                        //converts the string tile number from integer into a string to store in the database.
                        saveposition= QString::number(tile[i][j]->tileNum);
                        piecePresent="1";
                        piecename=tile[i][j]->pieceName;

                        //opening up the databse to save the data
                        connection.connOpen();
                        QSqlQuery* savequery2= new QSqlQuery(connection.pdatabase);

                        //inserting the data into the database.
                        savequery2->prepare("INSERT INTO savemoves(PieceColour,PieceName,PiecePresent,PiecePosition,username) VALUES ('"+pieceColour+"','"+piecename+"','"+piecePresent+"','"+saveposition+"','"+playersturn+"')");
                        if (savequery2->exec())
                        {
                            gamesaved=true;
                        }
                        connection.connClose();

                    }
                }
           }

            if (gamesaved)
            {
                QMessageBox message;
                message.setText("Your Game has been saved!");
                 message.exec();
             }
             else
             {
                 QMessageBox message;
                 message.setText("Your Game was unable to save.");
                 message.exec();

             }


         }
         else if (count>1)
         {
            for(i=0;i<8;i++)
            {
                for(j=0;j<8;j++)
                {
                    //saving just the piece characteristics that is present on the board.
                    if (tile[i][j]->piece==1)
                    {
                        //converting the white piecolour from integer=1 to string'W' to store in the database.
                        if (tile[i][j]->pieceColor==1)
                        {
                            pieceColour="W";
                            //if white asssign player1username to playersturn
                            playersturn=player1username;

                        }
                        else if (tile[i][j]->pieceColor==0)
                        {
                            pieceColour="B";
                            //if white asssign player2username to playersturn
                            playersturn=player2username;
                        }

                        //converts the string tile number from integer into a string to store in the database.
                        saveposition= QString::number(tile[i][j]->tileNum);
                        piecePresent="1";
                        piecename=tile[i][j]->pieceName;


                        connection.connOpen();
                        QSqlQuery* savequery3= new QSqlQuery(connection.pdatabase);
                        savequery3->prepare("update savemoves set PieceColour='"+pieceColour+"',PieceName='"+piecename+"',PiecePresent='"+piecePresent+"',PiecePosition='"+saveposition+"',username='"+playersturn+"'");
                        if (savequery3->exec())
                        {
                            updatedgame=true;
                        }
                        connection.connClose();

                   }
              }
          }
           if (updatedgame)
           {
               QMessageBox message;
               message.setText("Your Game has been updated!");
               message.exec();
           }
           else
           {
               QMessageBox message;
               message.setText("Your Game was unable to be updated.");
               message.exec();

           }


      }
    }
    connection.connClose();

}


//performs what the instructions function should do
void buttonsheader::instructions()
{
    QMessageBox message;
    message.setText("WELCOME TO CAPTURE THE ENEMY! THE PIECES ARE Pawn=Soldier ROOK=BOMB  KING=WIZARD W=WIZARD BISHOP=PRIEST KNIGHT=HORSE");
    message.exec();
}

//draws the "buttongoback" and then calls the goback function
void buttongoback(QWidget *baseWidget)
{
    QPushButton *go = new QPushButton(baseWidget);
    go->setGeometry(0,670,100,30);
    go->setText("<- EXIT GAME");
    go->setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));");
    QObject::connect(go, SIGNAL(clicked()), baseWidget, SLOT(gogoback()));


}



// draws the buttonDelete and then calls delete function
void buttonDelete(QWidget *baseWidget) //Calling a subclass of the variable QWidget (temporary variable to refer to the main form outside of its function space)
{
    QPushButton *deletedatasaved = new QPushButton("UNDO MOVE",baseWidget); // defining a variable for the pushbutton
    deletedatasaved->setGeometry(0,170,100,30); // defines the size and the position of the button
    deletedatasaved->setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));"); // stylesheet defines font
    QObject::connect(deletedatasaved, SIGNAL(clicked()), baseWidget, SLOT(DeletedataSaved())); // Finally calls the button, signal is when button is clicked, slot calls the function to delete data

}



//draws the "save" button and calls the function save.
void savebutton(QWidget *baseWidget)
{

    QPushButton *save = new QPushButton("SAVE GAME",baseWidget);
    save->setGeometry(850,670,100,30);
    save->setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));");
    QObject::connect(save, SIGNAL(clicked()), baseWidget, SLOT(Save()));
}


//draws the button "how to play" and calls the function instructions.
void HowtoPlayInfo(QWidget *baseWidget)
{

    QPushButton *infoguide = new QPushButton("How To Play", baseWidget);
    infoguide->setGeometry(10,30,80,40);
    infoguide->setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));");
    QObject::connect(infoguide, SIGNAL(clicked()), baseWidget, SLOT(instructions()));
}



//initilization of the board
void chessBoard(QWidget *baseWidget, walls *tile[8][8])
{
    int i,j,k=0,hor,ver;
    Border *border[4]={ NULL };


    //borderDisplay
    {
    border[0]->outline(baseWidget,330,105,0);
    border[1]->outline(baseWidget,330,637,0);
    border[2]->outline(baseWidget,330,125,1);
    border[2]->outline(baseWidget,862,125,1);
    }

    //Create 64 tiles (allocating memories to the objects of Tile class)
    ver=125;
    for(i=0;i<8;i++)
    {
        hor=350;
        for(j=0;j<8;j++)
        {
            //empty squares
            tile[i][j] = new walls(baseWidget);
            tile[i][j]->tileColor=(i+j)%2;
            tile[i][j]->piece=0;
            tile[i][j]->row=i;
            tile[i][j]->col=j;
            tile[i][j]->tileNum=k++;
            tile[i][j]->wallDisplay();
            tile[i][j]->setGeometry(hor,ver,64,64);
            hor+=64;


        }
        ver+=64;

    }


     //squares that contains a piece
    //white soldiers piece colour=0
    for(j=0;j<8;j++)
    {
        tile[1][j]->piece=1;
        tile[1][j]->pieceColor=0;
        tile[1][j]->display('S');
    }

    //black soldiers piece colour 1
    for(j=0;j<8;j++)
    {
        tile[6][j]->piece=1;
        tile[6][j]->pieceColor=1;
        tile[6][j]->display('S');
    }

    //white and black remaining elements
    for(j=0;j<8;j++)
    {
        tile[0][j]->piece=1;
        tile[0][j]->pieceColor=0;
        tile[7][j]->piece=1;
        tile[7][j]->pieceColor=1;
    }

    {
    tile[0][0]->display('B');
    tile[0][1]->display('H');
    tile[0][2]->display('P');
    tile[0][3]->display('W');
    tile[0][4]->display('Z');
    tile[0][5]->display('P');
    tile[0][6]->display('H');
    tile[0][7]->display('B');

    }


    {
    tile[7][0]->display('B');
    tile[7][1]->display('H');
    tile[7][2]->display('P');
    tile[7][3]->display('W');
    tile[7][4]->display('Z');
    tile[7][5]->display('P');
    tile[7][6]->display('H');
    tile[7][7]->display('B');

    }


    wR=7;
    wC=4;

    bR=0;
    bC=4;

}


//validates the clicks and temps on the wall.
void validate(walls *temp,int c,QWidget *baseWidget)
{

    int retValue,i;

    enum Columna
    {
        PieceColour,Position,PieceName,NewPosition
    };


    //for each time the user touches the wall;
    disOrange();

    if(c==1)
    {

        //each time it's users turn to move a piece.
        if(temp->piece && (temp->pieceColor==turn))
        {
            QMediaPlayer *welcome = new QMediaPlayer();
            welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Desktop/mainChess/grabpiece.mov"));
            welcome->play();

            //moving a piece and the colour
            expw[max++]=temp->tileNum;

// gets the position of the current piece.

            if(temp->tileNum==0)
            {
                position="A8";
            }

            else if(temp->tileNum==1)
            {
                position="B8";
            }

            else if(temp->tileNum==2)
            {
                position="C8";
            }

            else if(temp->tileNum==3)
            {
                position="D8";
            }

            else if(temp->tileNum==4)
            {
                position="E8";
            }

            else if(temp->tileNum==5)
            {
                position="F8";
            }

            else if(temp->tileNum==6)
            {
                position="G8";
            }

            else if(temp->tileNum==7)
            {
                position="H8";
            }

            else if(temp->tileNum==8)
            {
                position="A7";
            }

            else if(temp->tileNum==9)
            {
                position="B7";
            }

            else if(temp->tileNum==10)
            {
                position="C7";
            }

            else if(temp->tileNum==11)
            {
                position="D7";
            }

            else if(temp->tileNum==12)
            {
                position="E7";
            }
            else if(temp->tileNum==13)
            {
                position="F7";
            }

            else if(temp->tileNum==14)
            {
                position="G7";
            }

            else if(temp->tileNum==15)
            {
                position="H7";
            }

            else if(temp->tileNum==16)
            {
                position="A6";
            }

            else if(temp->tileNum==17)
            {
                position="B6";
            }

            else if(temp->tileNum==18)
            {
                position="C6";
            }

            else if(temp->tileNum==19)
            {
                position="D6";
            }

            else if(temp->tileNum==20)
            {
                position="E6";
            }

            else if(temp->tileNum==21)
            {
                position="F6";
            }

            else if(temp->tileNum==22)
            {
                position="G6";
            }

            else if(temp->tileNum==23)
            {
                position="H6";
            }

            else if(temp->tileNum==24)
            {
                position="A5";
            }

            else if(temp->tileNum==25)
            {
                position="B5";
            }

            else if(temp->tileNum==26)
            {
                position="C5";
            }

            else if(temp->tileNum==27)
            {
                position="D5";
            }

            else if(temp->tileNum==28)
            {
                position="E5";
            }

            else if(temp->tileNum==29)
            {
                position="F5";
            }

            else if(temp->tileNum==30)
            {
                position="G5";
            }

            else if(temp->tileNum==31)
            {
                position="H5";
            }

            else if(temp->tileNum==32)
            {
                position="A4";
            }

            else if(temp->tileNum==33)
            {
                position="B4";
            }

            else if(temp->tileNum==34)
            {
                position="C4";
            }

            else if(temp->tileNum==35)
            {
                position="D4";
            }

            else if(temp->tileNum==36)
            {
                position="E4";
            }

            else if(temp->tileNum==37)
            {
                position="F4";
            }

            else if(temp->tileNum==38)
            {
                position="G4";
            }

            else if(temp->tileNum==39)
            {
                position="H4";
            }

            else if(temp->tileNum==40)
            {
                position="A3";
            }

            else if(temp->tileNum==41)
            {
                position="B3";
            }

            else if(temp->tileNum==42)
            {
                position="C3";
            }

            else if(temp->tileNum==43)
            {
                position="D3";
            }

            else if(temp->tileNum==44)
            {
                position="E3";
            }

            else if(temp->tileNum==45)
            {
                position="F3";
            }

            else if(temp->tileNum==46)
            {
                position="G3";
            }

            else if(temp->tileNum==47)
            {
                position="H3";
            }

            else if(temp->tileNum==48)
            {
                position="A2";
            }

            else if(temp->tileNum==49)
            {
                position="B2";
            }

            else if(temp->tileNum==50)
            {
                position="C2";
            }


            else if(temp->tileNum==51)
            {
                position="D2";
            }

            else if(temp->tileNum==52)
            {
                position="E2";
            }

            else if(temp->tileNum==53)
            {
                position="F2";
            }

            else if(temp->tileNum==54)
            {
                position="G2";
            }

            else if(temp->tileNum==55)
            {
                position="H2";
            }

            else if(temp->tileNum==56)
            {
                position="A1";
            }

            else if(temp->tileNum==57)
            {
                position="B1";
            }

            else if(temp->tileNum==58)
            {
                position="C1";
            }

            else if(temp->tileNum==59)
            {
                position="D1";
            }

            else if(temp->tileNum==60)
            {
                position="E1";
            }

            else if(temp->tileNum==61)
            {
                position="F1";
            }

            else if(temp->tileNum==62)
            {

                position="G1";
            }

            else if(temp->tileNum==63)
            {
                position="H1";
            }




            //check if the specific piece move is valid.
            retValue=valid->chooser(temp);

            //if the move is legal retValue=1.
            if(retValue)
            {
               click1= new walls();
               temp->setStyleSheet("QLabel {background-color: green;}");
               click1=temp;

            }
            //if move is illegal.
            else
             {
                temp->setStyleSheet("QLabel {background-color: red;}");
                count=0;
             }


    }
        else
        {

            //doesn't allow user to move their piece if it isn't their turn
            count=0;

        }
    }

    else
    {
        //when a user unclicks a piece on the wall refreshes the wall back to its old state.
        if(temp->tileNum==click1->tileNum)
        {

            click1->wallDisplay();

            max=0;
            count=0;


        }

        //The final destination of the piece.
        for(i=0;i<max;i++)
        {
            //checks if it's whites turn and the wall clicked on is equivalent to a valid move square.
            if(temp->tileNum==expw[i] && turn==1)
            {

                //moving the piece characteristics from previous position to new position
                click1->piece=0;
                temp->piece=1;
                temp->pieceColor=click1->pieceColor;
                temp->pieceName=click1->pieceName;



// gets the newposition of the piece;

                if(temp->tileNum==0)
                {
                    newposition="A8";
                }

                else if(temp->tileNum==1)
                {
                    newposition="B8";
                }

                else if(temp->tileNum==2)
                {
                    newposition="C8";
                }

                else if(temp->tileNum==3)
                {
                    newposition="D8";
                }

                else if(temp->tileNum==4)
                {
                    newposition="E8";
                }

                else if(temp->tileNum==5)
                {
                    newposition="F8";
                }

                else if(temp->tileNum==6)
                {
                    newposition="G8";
                }

                else if(temp->tileNum==7)
                {
                    newposition="H8";
                }

                else if(temp->tileNum==8)
                {
                    newposition="A7";
                }

                else if(temp->tileNum==9)
                {
                    newposition="B7";
                }

                else if(temp->tileNum==10)
                {
                    newposition="C7";
                }

                else if(temp->tileNum==11)
                {
                    newposition="D7";
                }

                else if(temp->tileNum==12)
                {
                    newposition="E7";
                }
                else if(temp->tileNum==13)
                {
                    newposition="F7";
                }

                else if(temp->tileNum==14)
                {
                    newposition="G7";
                }

                else if(temp->tileNum==15)
                {
                    newposition="H7";
                }

                else if(temp->tileNum==16)
                {
                    newposition="A6";
                }

                else if(temp->tileNum==17)
                {
                    newposition="B6";
                }

                else if(temp->tileNum==18)
                {
                    newposition="C6";
                }

                else if(temp->tileNum==19)
                {
                    newposition="D6";
                }

                else if(temp->tileNum==20)
                {
                    newposition="E6";
                }

                else if(temp->tileNum==21)
                {
                    newposition="F6";
                }

                else if(temp->tileNum==22)
                {
                    newposition="G6";
                }

                else if(temp->tileNum==23)
                {
                    newposition="H6";
                }

                else if(temp->tileNum==24)
                {
                    newposition="A5";
                }

                else if(temp->tileNum==25)
                {
                    newposition="B5";
                }

                else if(temp->tileNum==26)
                {
                    newposition="C5";
                }

                else if(temp->tileNum==27)
                {
                    newposition="D5";
                }

                else if(temp->tileNum==28)
                {
                    newposition="E5";
                }

                else if(temp->tileNum==29)
                {
                    newposition="F5";
                }

                else if(temp->tileNum==30)
                {
                    newposition="G5";
                }

                else if(temp->tileNum==31)
                {
                    newposition="H5";
                }

                else if(temp->tileNum==32)
                {
                    newposition="A4";
                }

                else if(temp->tileNum==33)
                {
                    newposition="B4";
                }

                else if(temp->tileNum==34)
                {
                    newposition="C4";
                }

                else if(temp->tileNum==35)
                {
                    newposition="D4";
                }

                else if(temp->tileNum==36)
                {
                    newposition="E4";
                }

                else if(temp->tileNum==37)
                {
                    newposition="F4";
                }

                else if(temp->tileNum==38)
                {
                    newposition="G4";
                }

                else if(temp->tileNum==39)
                {
                    newposition="H4";
                }

                else if(temp->tileNum==40)
                {
                    newposition="A3";
                }

                else if(temp->tileNum==41)
                {
                    newposition="B3";
                }

                else if(temp->tileNum==42)
                {
                    newposition="C3";
                }

                else if(temp->tileNum==43)
                {
                    newposition="D3";
                }

                else if(temp->tileNum==44)
                {
                    newposition="E3";
                }

                else if(temp->tileNum==45)
                {
                    newposition="F3";
                }

                else if(temp->tileNum==46)
                {
                    newposition="G3";
                }

                else if(temp->tileNum==47)
                {
                    newposition="H3";
                }

                else if(temp->tileNum==48)
                {
                    newposition="A2";
                }

                else if(temp->tileNum==49)
                {
                    newposition="B2";
                }

                else if(temp->tileNum==50)
                {
                    newposition="C2";
                }


                else if(temp->tileNum==51)
                {
                    newposition="D2";
                }

                else if(temp->tileNum==52)
                {
                    newposition="E2";
                }

                else if(temp->tileNum==53)
                {
                    newposition="F2";
                }

                else if(temp->tileNum==54)
                {
                    newposition="G2";
                }

                else if(temp->tileNum==55)
                {
                    newposition="H2";
                }

                else if(temp->tileNum==56)
                {
                    newposition="A1";
                }

                else if(temp->tileNum==57)
                {
                    newposition="B1";
                }

                else if(temp->tileNum==58)
                {
                    newposition="C1";
                }

                else if(temp->tileNum==59)
                {
                    newposition="D1";
                }

                else if(temp->tileNum==60)
                {
                    newposition="E1";
                }

                else if(temp->tileNum==61)
                {
                    newposition="F1";
                }

                else if(temp->tileNum==62)
                {

                    newposition="G1";
                }

                else if(temp->tileNum==63)
                {
                    newposition="H1";
                }




                //displaying the board of the new position
                click1->display(click1->pieceName);
                temp->display(click1->pieceName);

                //displays (refreshes) the tile colour of the walls.
                click1->wallDisplay();
                temp->wallDisplay();

                //checks if move is illegal
                retValue=valid->check(click1);

                 //if illegal turn the square red.
                if(retValue)
                {
                    tile[wR][wC]->setStyleSheet("QLabel {background-color: red;}");


                }


                disOrange();

                //plays the audio sound of when you move a piece to its final destination
                QMediaPlayer *movepiece = new QMediaPlayer();
                movepiece->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Desktop/mainChess/droppiece.mov"));
                movepiece->play();

                if (temp->pieceColor==1 && turn==1)
                {
                    pieceColour="W";
                    playersturn=player1username;

                }
                if (temp->pieceColor==0 && turn==0)
                {
                    pieceColour="B";
                    playersturn=player2username;
                }


                piecePresent="1";

                piecename=temp->pieceName;

                max=0;

                //black's turn
                turn=(turn+1)%2;

                count=0;


            }

            //checks if it's blacks  turn and the wall clicked on is equivalent to a valid move square.
            else if(temp->tileNum==expw[i] && turn==0)
            {

                count=1;


                //moving the piece characteristics from previous position to new position
                click1->piece=0;
                temp->piece=1;
                temp->pieceColor=click1->pieceColor;
                temp->pieceName=click1->pieceName;


// gets the newposition of the piece
                if(temp->tileNum==0)
                {
                    newposition="A8";
                }

                else if(temp->tileNum==1)
                {
                    newposition="B8";
                }

                else if(temp->tileNum==2)
                {
                    newposition="C8";
                }

                else if(temp->tileNum==3)
                {
                    newposition="D8";
                }

                else if(temp->tileNum==4)
                {
                    newposition="E8";
                }

                else if(temp->tileNum==5)
                {
                    newposition="F8";
                }

                else if(temp->tileNum==6)
                {
                    newposition="G8";
                }

                else if(temp->tileNum==7)
                {
                    newposition="H8";
                }

                else if(temp->tileNum==8)
                {
                    newposition="A7";
                }

                else if(temp->tileNum==9)
                {
                    newposition="B7";
                }

                else if(temp->tileNum==10)
                {
                    newposition="C7";
                }

                else if(temp->tileNum==11)
                {
                    newposition="D7";
                }

                else if(temp->tileNum==12)
                {
                    newposition="E7";
                }
                else if(temp->tileNum==13)
                {
                    newposition="F7";
                }

                else if(temp->tileNum==14)
                {
                    newposition="G7";
                }

                else if(temp->tileNum==15)
                {
                    newposition="H7";
                }

                else if(temp->tileNum==16)
                {
                    newposition="A6";
                }

                else if(temp->tileNum==17)
                {
                    newposition="B6";
                }

                else if(temp->tileNum==18)
                {
                    newposition="C6";
                }

                else if(temp->tileNum==19)
                {
                    newposition="D6";
                }

                else if(temp->tileNum==20)
                {
                    newposition="E6";
                }

                else if(temp->tileNum==21)
                {
                    newposition="F6";
                }

                else if(temp->tileNum==22)
                {
                    newposition="G6";
                }

                else if(temp->tileNum==23)
                {
                    newposition="H6";
                }

                else if(temp->tileNum==24)
                {
                    newposition="A5";
                }

                else if(temp->tileNum==25)
                {
                    newposition="B5";
                }

                else if(temp->tileNum==26)
                {
                    newposition="C5";
                }

                else if(temp->tileNum==27)
                {
                    newposition="D5";
                }

                else if(temp->tileNum==28)
                {
                    newposition="E5";
                }

                else if(temp->tileNum==29)
                {
                    newposition="F5";
                }

                else if(temp->tileNum==30)
                {
                    newposition="G5";
                }

                else if(temp->tileNum==31)
                {
                    newposition="H5";
                }

                else if(temp->tileNum==32)
                {
                    newposition="A4";
                }

                else if(temp->tileNum==33)
                {
                    newposition="B4";
                }

                else if(temp->tileNum==34)
                {
                    newposition="C4";
                }

                else if(temp->tileNum==35)
                {
                    newposition="D4";
                }

                else if(temp->tileNum==36)
                {
                    newposition="E4";
                }

                else if(temp->tileNum==37)
                {
                    newposition="F4";
                }

                else if(temp->tileNum==38)
                {
                    newposition="G4";
                }

                else if(temp->tileNum==39)
                {
                    newposition="H4";
                }

                else if(temp->tileNum==40)
                {
                    newposition="A3";
                }

                else if(temp->tileNum==41)
                {
                    newposition="B3";
                }

                else if(temp->tileNum==42)
                {
                    newposition="C3";
                }

                else if(temp->tileNum==43)
                {
                    newposition="D3";
                }

                else if(temp->tileNum==44)
                {
                    newposition="E3";
                }

                else if(temp->tileNum==45)
                {
                    newposition="F3";
                }

                else if(temp->tileNum==46)
                {
                    newposition="G3";
                }

                else if(temp->tileNum==47)
                {
                    newposition="H3";
                }

                else if(temp->tileNum==48)
                {
                    newposition="A2";
                }

                else if(temp->tileNum==49)
                {
                    newposition="B2";
                }

                else if(temp->tileNum==50)
                {
                    newposition="C2";
                }


                else if(temp->tileNum==51)
                {
                    newposition="D2";
                }

                else if(temp->tileNum==52)
                {
                    newposition="E2";
                }

                else if(temp->tileNum==53)
                {
                    newposition="F2";
                }

                else if(temp->tileNum==54)
                {
                    newposition="G2";
                }

                else if(temp->tileNum==55)
                {
                    newposition="H2";
                }

                else if(temp->tileNum==56)
                {
                    newposition="A1";
                }

                else if(temp->tileNum==57)
                {
                    newposition="B1";
                }

                else if(temp->tileNum==58)
                {
                    newposition="C1";
                }

                else if(temp->tileNum==59)
                {
                    newposition="D1";
                }

                else if(temp->tileNum==60)
                {
                    newposition="E1";
                }

                else if(temp->tileNum==61)
                {
                    newposition="F1";
                }

                else if(temp->tileNum==62)
                {

                    newposition="G1";
                }

                else if(temp->tileNum==63)
                {
                    newposition="H1";
                }


                //displaying the board of the new position
                click1->display(click1->pieceName);
                temp->display(click1->pieceName);

                //displays the colour of each tile
                click1->wallDisplay();
                temp->wallDisplay();
                //checks if move is illegal
                retValue=valid->check(click1);
                 //if illegal turn the square red.
                if(retValue)
                {
                    tile[wR][wC]->setStyleSheet("QLabel {background-color: red;}");
                }


                disOrange();

                //plays the audio sound of when you move a piece to its final destination
                QMediaPlayer *movepiece = new QMediaPlayer();
                movepiece->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Desktop/mainChess/droppiece.mov"));
                movepiece->play();

                if (temp->pieceColor==1 && turn==1)
                {
                    pieceColour="W";
                    playersturn=player1username;


                }
                if (temp->pieceColor==0 && turn==0)
                {
                    pieceColour="B";

                    playersturn=player2username;
                }

                piecename=temp->pieceName;
                piecePresent="1";

                max=0;

                turn=1;

              //whites turn
                count=0;

            }
            //drawing the table and assigning its columns header list to each column.
            int rowcount=0;
            QTableView *tableview= new QTableView(baseWidget);
            QStandardItemModel *model = new QStandardItemModel(rowcount, 4, baseWidget); //increment Rows and 4 Columns
            model->setHorizontalHeaderItem(0, new QStandardItem(QString("P.Colour")));
            model->setHorizontalHeaderItem(1, new QStandardItem(QString("OldMove")));
            model->setHorizontalHeaderItem(2, new QStandardItem(QString("P.Name")));
            model->setHorizontalHeaderItem(3, new QStandardItem(QString("NewMove")));
            rowcount=model->rowCount(QModelIndex());
            //asssign it's values to each row.
            model->insertRow(rowcount);
            tableview->setModel(model);
            tableview->setGeometry(950,170,400,520);

            model->setItem(rowcount,PieceColour, new QStandardItem(pieceColour));
            model->setItem(rowcount,Position, new QStandardItem(position));
            model->setItem(rowcount,PieceName, new QStandardItem(piecename));
            model->setItem(rowcount,NewPosition, new QStandardItem(newposition));
            rowcount++;
            tableview->show();

        }
        sleep(double(0.4));

    }

}


// draws the accessories of the chess board
void accessories(QWidget *baseWidget)
{



    //player1 picture
    QLabel *player1 = new QLabel(baseWidget);
    player1->setGeometry(100,500,100,100);
    player1->setPixmap(QPixmap(":/eachpiece/profile.png"));
    QLabel *name1 = new QLabel(player1username, baseWidget);
    name1->setGeometry(125,610,80,20);

     //player2 picture
    QLabel *player2 = new QLabel(baseWidget);
    player2->setGeometry(100,100,100,100);
    player2->setPixmap(QPixmap(":/eachpiece/profile.png"));
    QLabel *name2 = new QLabel(player2username, baseWidget);
    name2->setGeometry(125,210,80,20);

    //player1 status
    QLabel *player1status1 = new QLabel(player1username + " it's your turn.",baseWidget);
    player1status1->setGeometry(180,620,150,50);
    player1status1->setStyleSheet("font-weight: bold; color: red");

     //player2 picture
    QLabel *player2status2 = new QLabel(player2username + " it's your turn.",baseWidget);
    player2status2->setGeometry(190,220,150,50);
    player2status2->setStyleSheet("font-weight: bold; color: red");




}

//discolours the path of the walls highlighted orange.
void disOrange()
{
    int i;
    for(i=0;i<=max;i++)
        //changes the colour from orange to the original colour of the walls.
        tile[expw[i]/8][expw[i]%8]->wallDisplay();

}



//loads up the board from the databse.
void load(walls *tile[8][8])
{
    QString PieceColour,PieceName,PiecePresent,player;
    int PiecePosition=0;

    // to load the chess board
    savemoves connection;

    //redraws the chess window.
    buttonsheader *myWidget=new buttonsheader();
    myWidget->setGeometry(0,0,1370,700);

    int i,j,k=0,hor,ver;
    Border *border[4]={ NULL };


    //redraws the borderDisplay
    {
    border[0]->outline(myWidget,330,105,0);
    border[1]->outline(myWidget,330,637,0);
    border[2]->outline(myWidget,330,125,1);
    border[2]->outline(myWidget,862,125,1);
    }


    //Create 64 tiles (allocating memories to the objects of Tile class)
    ver=125;
    for(i=0;i<8;i++)
    {
        hor=350;
        for(j=0;j<8;j++)
        {
            //empty squares
            tile[i][j] = new walls(myWidget);
            tile[i][j]->tileColor=(i+j)%2;
            tile[i][j]->piece=0;
            tile[i][j]->row=i;
            tile[i][j]->col=j;
            tile[i][j]->tileNum=k++;
            tile[i][j]->wallDisplay();
            tile[i][j]->setGeometry(hor,ver,64,64);
            hor+=64;


        }
        ver+=64;

    }

    for(i=0;i<8;i++)
    {
        for(j=0;j<8;j++)
        {
            connection.connOpen();
            QSqlQuery* query = new QSqlQuery(connection.pdatabase);
            query->exec("select * from savemoves where PieceColour ='"+PieceColour+"', PieceName ='"+PieceName+"', PiecePresent ='"+PiecePresent+"', PiecePosition ='"+PiecePosition+"',username ='"+player+"'");

            while(query->next())
            {
                qDebug()<<query->value(PiecePosition).toInt();
                //converts the colour of the pieces
                if(PieceColour=="W")
                {
                    tile[i][j]->pieceColor=1;
                    player1username=player;
                }
                else if(PieceColour=="B")
                {
                    tile[i][j]->pieceColor=0;
                    player2username=player;
                }

                //converts the pieces name
                if (PieceName=="S")
                {
                    tile[i][j]->pieceName='S';
                     tile[i][j]->display('S');
                }
                else if (PieceName=="B")
                {
                   tile[i][j]->pieceName='B';
                     tile[i][j]->display('B');

                }

                else if (PieceName=="W")
                {
                    tile[i][j]->pieceName='W';
                     tile[i][j]->display('W');
                }

                else if (PieceName=="P")
                {
                    tile[i][j]->pieceName='P';
                     tile[i][j]->display('P');
                }
                else if (PieceName=="Z")
                {
                    tile[i][j]->pieceName='Z';
                     tile[i][j]->display('Z');
                }

                else if (PieceName=="H")
                {
                    tile[i][j]->pieceName='H';
                     tile[i][j]->display('H');
                }


                // gets the position of the pieces from the database.
                if((query->value(PiecePosition).toInt())==0)
                {
                    tile[i][j]->tileNum=0;

                }

                if(PiecePosition==1)
                {
                    tile[i][j]->tileNum=1;
                }

                if(PiecePosition==2)
                {
                    tile[i][j]->tileNum=2;
                }

                if(PiecePosition==3)
                {
                    tile[i][j]->tileNum=3;
                }

                if(PiecePosition==4)
                {
                    tile[i][j]->tileNum=4;
                }

                if(PiecePosition==5)
                {
                    tile[i][j]->tileNum=5;
                }

                if(PiecePosition==6)
                {
                    tile[i][j]->tileNum=6;
                }

                if(PiecePosition==7)
                {
                    tile[i][j]->tileNum=7;
                }

                else if(PiecePosition==8)
                {
                    tile[i][j]->tileNum=8;
                }

                else if(PiecePosition==9)
                {
                    tile[i][j]->tileNum=9;
                }

                else if(PiecePosition==10)
                {
                    tile[i][j]->tileNum=10;
                }

                else if(PiecePosition==11)
                {
                    tile[i][j]->tileNum=11;
                }

                else if(PiecePosition==12)
                {
                    tile[i][j]->tileNum=12;
                }
                else if(PiecePosition==13)
                {
                    tile[i][j]->tileNum=13;
                }

                else if(PiecePosition==14)
                {
                    tile[i][j]->tileNum=14;
                }

                else if(PiecePosition==15)
                {
                    tile[i][j]->tileNum=15;
                }

                else if(PiecePosition==16)
                {
                    tile[i][j]->tileNum=16;
                }

                else if(PiecePosition==17)
                {
                    tile[i][j]->tileNum=17;
                }

                else if(PiecePosition==18)
                {
                    tile[i][j]->tileNum=18;
                }

                else if(PiecePosition==19)
                {
                    tile[i][j]->tileNum=19;
                }

                else if(PiecePosition==20)
                {
                    tile[i][j]->tileNum=20;
                }

                else if(PiecePosition==21)
                {
                    tile[i][j]->tileNum=21;
                }

                else if(PiecePosition==22)
                {
                    tile[i][j]->tileNum=22;
                }

                else if(PiecePosition==23)
                {
                    tile[i][j]->tileNum=23;
                }

                else if(PiecePosition==24)
                {
                    tile[i][j]->tileNum=24;
                }

                else if(PiecePosition==25)
                {
                    tile[i][j]->tileNum=25;
                }

                else if(PiecePosition==26)
                {
                    tile[i][j]->tileNum=26;
                }

                else if(PiecePosition==27)
                {
                    tile[i][j]->tileNum=27;
                }

                else if(PiecePosition==28)
                {
                    tile[i][j]->tileNum=28;
                }

                else if(PiecePosition==29)
                {
                    tile[i][j]->tileNum=29;
                }

                else if(PiecePosition==30)
                {
                    tile[i][j]->tileNum=30;
                }

                else if(PiecePosition==31)
                {
                    tile[i][j]->tileNum=31;
                }

                else if(PiecePosition==32)
                {
                    tile[i][j]->tileNum=32;
                }

                else if(PiecePosition==33)
                {
                    tile[i][j]->tileNum=33;
                }

                else if(PiecePosition==34)
                {
                    tile[i][j]->tileNum=34;
                }

                else if(PiecePosition==35)
                {
                    tile[i][j]->tileNum=35;
                }

                else if(PiecePosition==36)
                {
                    tile[i][j]->tileNum=36;
                }

                else if(PiecePosition==37)
                {
                    tile[i][j]->tileNum=37;
                }

                else if(PiecePosition==38)
                {
                    tile[i][j]->tileNum=38;
                }

                else if(PiecePosition==39)
                {
                    tile[i][j]->tileNum=39;
                }

                else if(PiecePosition==40)
                {
                    tile[i][j]->tileNum=40;
                }

                else if(PiecePosition==41)
                {
                    tile[i][j]->tileNum=41;
                }

                else if(PiecePosition==42)
                {
                    tile[i][j]->tileNum=42;
                }

                else if(PiecePosition==43)
                {
                    tile[i][j]->tileNum=43;
                }

                else if(PiecePosition==44)
                {
                    tile[i][j]->tileNum=44;
                }

                else if(PiecePosition==45)
                {
                    tile[i][j]->tileNum=45;
                }

                else if(PiecePosition==46)
                {
                    tile[i][j]->tileNum=46;
                }

                else if(PiecePosition==47)
                {
                    tile[i][j]->tileNum=47;
                }

                else if(PiecePosition==48)
                {
                    tile[i][j]->tileNum=48;
                }

                else if(PiecePosition==49)
                {
                    tile[i][j]->tileNum=49;
                }

                else if(PiecePosition==50)
                {
                    tile[i][j]->tileNum=50;
                }

                else if(PiecePosition==51)
                {
                    tile[i][j]->tileNum=51;
                }

                else if(PiecePosition==52)
                {
                    tile[i][j]->tileNum=52;
                }

                else if(PiecePosition==53)
                {
                    tile[i][j]->tileNum=53;
                }

                else if(PiecePosition==54)
                {
                    tile[i][j]->tileNum=54;
                }

                else if(PiecePosition==55)
                {
                    tile[i][j]->tileNum=55;
                }

                else if(PiecePosition==56)
                {
                    tile[i][j]->tileNum=56;
                }

                else if(PiecePosition==57)
                {
                    tile[i][j]->tileNum=57;
                }

                else if(PiecePosition==58)
                {
                    tile[i][j]->tileNum=58;
                }

                else if(PiecePosition==59)
                {
                    tile[i][j]->tileNum=59;
                }

                else if(PiecePosition==60)
                {
                    tile[i][j]->tileNum=60;
                }

                else if(PiecePosition==61)
                {
                    tile[i][j]->tileNum=61;
                }

                else if(PiecePosition==62)
                {

                    tile[i][j]->tileNum=62;
                }

                else if(PiecePosition==63)
                {
                    tile[i][j]->tileNum=63;
                }
                 connection.connClose();
            }
        }
    }

    for(j=0;j<8;j++)
    {
        tile[1][j]->piece=1;
        tile[1][j]->pieceColor=0;
        tile[1][j]->display('S');
    }

    //black soldiers piece colour 1
    for(j=0;j<8;j++)
    {
        tile[6][j]->piece=1;
        tile[6][j]->pieceColor=1;
        tile[6][j]->display('S');
    }

    //white and black remaining elements
    for(j=0;j<8;j++)
    {
        tile[0][j]->piece=1;
        tile[0][j]->pieceColor=0;
        tile[7][j]->piece=1;
        tile[7][j]->pieceColor=1;
    }

    {
    tile[0][0]->display('B');
    tile[0][1]->display('H');
    tile[0][2]->display('P');
    tile[0][3]->display('W');
    tile[0][4]->display('Z');
    tile[0][5]->display('P');
    tile[0][6]->display('H');
    tile[0][7]->display('B');

    }


    {
    tile[7][0]->display('B');
    tile[7][1]->display('H');
    tile[7][2]->display('P');
    tile[7][3]->display('W');
    tile[7][4]->display('Z');
    tile[7][5]->display('P');
    tile[7][6]->display('H');
    tile[7][7]->display('B');

    }


    wR=7;
    wC=4;

    bR=0;
    bC=4;

    accessories(myWidget);
    buttongoback(myWidget);
    buttonDelete(myWidget);
    savebutton(myWidget);
    HowtoPlayInfo(myWidget);
    myWidget->show();

}

//on new game it loads up the saved game from databse.
void gamestatus::on_newgame_clicked()
{

    if (player1username.contains("") && player2username.contains(""))
    {

        buttonsheader *myWidget=new buttonsheader();
        myWidget->setGeometry(0,0,1370,700);

        accessories(myWidget);
        chessBoard(myWidget,tile);
        buttongoback(myWidget);
        buttonDelete(myWidget);
        savebutton(myWidget);
        HowtoPlayInfo(myWidget);
        myWidget->show();
        this->hide();
    }

}

//on gamestatus go back button cllicked it would take it back to the
void gamestatus::on_goback_clicked()
{
    this->hide();
    ScreenWindow *newusermainscreen;
    newusermainscreen = new ScreenWindow(this);
    newusermainscreen -> show();
}

//once current game has been clicked it will run the load function.
void gamestatus::on_currentgame_clicked()
{
    this->hide();
   load(tile);
}

// Savemoves header
#ifndef SAVEMOVES_H
#define SAVEMOVES_H
#include <QtSql>
#include <QFileInfo>


class savemoves // this is where the connection to the database was created.
{
public:
    savemoves();

    QSqlDatabase pdatabase;
       void connClose()
       {
           pdatabase.close();
           pdatabase.removeDatabase(QSqlDatabase::defaultConnection);
       }

       bool connOpen()
       {
           pdatabase=QSqlDatabase::addDatabase("QSQLITE");
           pdatabase.setDatabaseName("/Users/yeaminsidiquee/Downloads/chessproject1.db");

           if(!pdatabase.open()){
               qDebug()<<("Failed to open the database");
               return false;
           }
           else{
               qDebug()<<("Connected2...");
               return true;
           }
       }
};

#endif // SAVEMOVES_H

//savemoves cpp
#include "savemoves.h"

savemoves::savemoves()
{

}

// Buttonsheader header 

#ifndef BUTTONSHEADER_H
#define BUTTONSHEADER_H


#include <QPushButton>
#include <QObject>

class buttonsheader
        : public QWidget
{
     Q_OBJECT
public:
    buttonsheader();


public slots: //this is a slot to connect to the signal
         void DeletedataSaved(); //this defines the function to delete the game
         void Save();
         void gogoback();
         void instructions();

};

#endif // BUTTONSHEADER_H


//Buttonsheader cpp
#include "buttonsheader.h"

buttonsheader::buttonsheader()
{

}

//walls header

#ifndef WALLS_H
#define WALLS_H
#include <QLabel>
//#include <QThread>
#include <QObject>

class walls: public QLabel
{
public:
    //Fields
        int tileColor,piece,pieceColor,row,col,tileNum;
        char  pieceName;
        //Constructors
        walls(QWidget* pParent=0, Qt::WindowFlags f=0) : QLabel(pParent, f) {}
        walls(const QString& text, QWidget* pParent = 0, Qt::WindowFlags f = 0) : QLabel(text, pParent, f){}


        //Methods
        void mousePressEvent(QMouseEvent *event);
        void display(char elem);
        void wallDisplay();


};


#endif // WALLS_H


//walls cpp
#include "walls.h"
#include "validatemoves.h"
#include "gamestatus.h"


extern int count,turn;
extern walls *click1;
extern walls *tile[8][8];

void walls::display(char elem)
{
    this->pieceName=elem;

    //White pieces
    if(this->pieceColor && this->piece)
    {
        switch(elem)
        {
            // S for Soldier piece
            case 'S': this->setPixmap(QPixmap(":/eachpiece/pawn_white.svg"));
                      break;

            // B for Bomb piece
            case 'B': this->setPixmap(QPixmap(":/eachpiece/rook_white.svg"));
                      break;

            // H for Horse piece
            case 'H': this->setPixmap(QPixmap(":/eachpiece/knight_white.svg"));
                      break;

            // Z for Wizard piece
            case 'Z': this->setPixmap(QPixmap(":/eachpiece/king_white.svg"));
                      break;

            // W for Witch piece
            case 'W': this->setPixmap(QPixmap(":/eachpiece/queen_white.svg"));
                      break;

            // P for Priest piece
            case 'P': this->setPixmap(QPixmap(":/eachpiece/bishop_white.svg"));
                      break;;
        }
    }

    //Black pieces
    else if(this->piece)
    {
        switch(elem)
        {
        // S for Soldier piece
        case 'S': this->setPixmap(QPixmap(":/eachpiece/pawn_black.svg"));
                  break;

        // B for Bomb piece
        case 'B': this->setPixmap(QPixmap(":/eachpiece/rook_black.svg"));
                  break;

        // H for Horse piece
        case 'H': this->setPixmap(QPixmap(":/eachpiece/knight_black.svg"));
                  break;

        // Z for Wizard piece
        case 'Z': this->setPixmap(QPixmap(":/eachpiece/king_black.svg"));
                  break;

        // W for Witch piece
        case 'W': this->setPixmap(QPixmap(":/eachpiece/queen_black.svg"));
                  break;

        // P for Priest piece
        case 'P': this->setPixmap(QPixmap(":/eachpiece/bishop_black.svg"));
                  break;
        }
    }
    else
        this->clear();
}



//highlights the path of the piece that is movable.
void walls::wallDisplay()
{

    if(this->tileColor)
        this->setStyleSheet("QLabel {background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(164, 164, 164, 255), stop:1 rgba(255, 255, 255, 255));\n}");
    else
        this->setStyleSheet("QLabel {background-color: qconicalgradient(cx:0.5, cy:0.5, angle:0, stop:0 rgba(35, 40, 3, 255), stop:0.16 rgba(136, 106, 22, 255), stop:0.225 rgba(166, 140, 41, 255), stop:0.285 rgba(204, 181, 74, 255), stop:0.345 rgba(235, 219, 102, 255), stop:0.415 rgba(245, 236, 112, 255), stop:0.52 rgba(209, 190, 76, 255), stop:0.57 rgba(187, 156, 51, 255), stop:0.635 rgba(168, 142, 42, 255), stop:0.695 rgba(202, 174, 68, 255), stop:0.75 rgba(218, 202, 86, 255), stop:0.815 rgba(208, 187, 73, 255), stop:0.88 rgba(187, 156, 51, 255), stop:0.935 rgba(137, 108, 26, 255), stop:1 rgba(35, 40, 3, 255));\n}");
}


//newplayer cpp my bit of the code

        //plays the audio welcome message
        QMediaPlayer *welcome = new QMediaPlayer();
        welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Capture.m4a"));
        welcome->play();
//plays the incorrect details audio message
        QMediaPlayer *incorrect = new QMediaPlayer();
        incorrect->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Sorry.m4a"));
        incorrect->play();
     
//The complete code
#include "newplayer.h"
#include "ui_newplayer.h"
#include <QMessageBox>
#include "ScreenWindow.h"
#include <QMediaPlayer>

newplayer::newplayer(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::newplayer)
{
    ui->setupUi(this);
}

newplayer::~newplayer()
{
    delete ui;
}

void newplayer::on_create_clicked()

{
    QString forename, surname, newpassword, email, newusername, reenterpassword;
    forename=ui->forename->text();
    surname=ui->surname->text();
    newpassword=ui->newpassword->text();
    reenterpassword=ui->reenterpassword->text();
    email=ui->email->text();
    newusername=ui->newusername->text();
    if (newpassword == reenterpassword)
    {

        connOpen();
        QSqlQuery qry;
        qry.prepare("select * from userprimarydata where Forename='"+forename+"', Surname='"+surname+"', Password ='"+newpassword+"', Email='"+email+"', Username ='"+newusername+"'");
        qry.prepare("INSERT INTO userprimarydata (Forename, Surname, Password, Email, Username) VALUES ('"+forename+"','"+surname+"','"+newpassword+"','"+email+"','"+newusername+"')");
        qry.exec();

        QSqlQuery qry2;
        qry2.prepare("select * from userdata where Password ='"+newpassword+"', Username ='"+newusername+"'");
        qry2.prepare("INSERT INTO userdata(Username, Password) VALUES ('"+newusername+"','"+newpassword+"')");
        qry2.exec();
        this->hide();
        connClose();

        //plays the audio welcome message
        QMediaPlayer *welcome = new QMediaPlayer();
        welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Capture.m4a"));
        welcome->play();

        this->hide();
        gamestatus.show();


    }



    else if (newpassword != reenterpassword)
    {

        //plays the incorrect details audio message
        QMediaPlayer *incorrect = new QMediaPlayer();
        incorrect->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Sorry.m4a"));
        incorrect->play();

        QMessageBox message;
        message.setText("Sorry!!. Password doesn't match, please try again.");
        message.exec();
    }
}



void newplayer::on_goback_clicked()
{
    this->hide();
    ScreenWindow *newusermainscreen;
    newusermainscreen = new ScreenWindow(this);
    newusermainscreen -> show();
}

//loginuser cpp my bit of the code

 //plays the audio welcome message
            QMediaPlayer *welcome = new QMediaPlayer();
            welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Capture.m4a"));
            welcome->play();
            
  //plays the incorrect details audio message
            QMediaPlayer *incorrect = new QMediaPlayer();
            incorrect->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Sorry.m4a"));
            incorrect->play();
       
// The complete code
#include "LoginUser.h"
#include "ui_loginuser.h"
#include <QMessageBox>
#include "ScreenWindow.h"
#include <QMediaPlayer>

loginuser::loginuser(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::loginuser)
{
    ui->setupUi(this);
}

loginuser::~loginuser()
{
    delete ui;
}

void loginuser::on_enter_clicked()
{
    QString username, password;
    username=ui->name->text();
    password=ui->passkey->text();
    connOpen();
    QSqlQuery qry;

    if(qry.exec("select * from userdata where Password ='"+password+"' and Username ='"+username+"'"))
    {
        int count=0;
        while(qry.next())
        {
             count++;
        }
        if (count==1)
        {
            this->hide();
            gamestatus.show();
            connClose();

            //plays the audio welcome message
            QMediaPlayer *welcome = new QMediaPlayer();
            welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Capture.m4a"));
            welcome->play();
         }
        if (count<1)
         {
            //plays the incorrect details audio message
            QMediaPlayer *incorrect = new QMediaPlayer();
            incorrect->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Sorry.m4a"));
            incorrect->play();

            QMessageBox message;
            message.setText("Sorry!!. The details entered does not exist, please try again.");
            message.exec();
            connClose();


         }
     }



}

void loginuser::on_gobackbutton_clicked()
{
    this->hide();
    ScreenWindow *mainscreen;
    mainscreen = new ScreenWindow(this);
    mainscreen -> show();
}

//multiplayerlogin cpp my bit of the code
            QMediaPlayer *welcome = new QMediaPlayer();
            welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Capture.m4a"));
            welcome->play();

            //plays the incorrect details audio message.
            QMediaPlayer *incorrect = new QMediaPlayer();
            incorrect->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Sorry.m4a"));
            incorrect->play();
//multiplayerlogin complete code

#include "multiplayerlogin.h"
#include "ui_multiplayerlogin.h"
#include <QMessageBox>
#include "ScreenWindow.h"
#include "gamestatus.h"
#include <QMediaPlayer>
QString player1username, player1password,player2username, player2password;

multiplayerlogin::multiplayerlogin(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::multiplayerlogin)
{
    ui->setupUi(this);

}

multiplayerlogin::~multiplayerlogin()
{
    delete ui;
}



void multiplayerlogin::on_goback_clicked()
{
    this->hide();
    ScreenWindow *loginmainscreen;
    loginmainscreen = new ScreenWindow(this);
    loginmainscreen -> show();
}



void multiplayerlogin::on_multiplayerenter_clicked()
{
    player1username=ui->player1username->text();
    player1password=ui->player1password->text();
    player2username=ui->player2username->text();
    player2password=ui->player2password->text();
    connOpen();
    QSqlQuery qry;
    QSqlQuery qry2;
    if(qry.exec("select * from userdata where Password ='"+player1password+"' and Username ='"+player1username+"'"))
    {
       if(qry2.exec("select * from userdata where Password ='"+player2password+"' and Username ='"+player2username+"'"))
       {
          int count1=0;
          while(qry.next())
          {
              while(qry2.next())
              {
                 count1++;
              }
          }
        if (count1==1)
        {
            this->hide();
            gamestatus.show();
            connClose();
            QMediaPlayer *welcome = new QMediaPlayer();
            welcome->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Capture.m4a"));
            welcome->play();

         }
        if (count1<1)
        {
            //plays the incorrect details audio message.
            QMediaPlayer *incorrect = new QMediaPlayer();
            incorrect->setMedia(QUrl::fromLocalFile("/Users/yeaminsidiquee/Downloads/Sorry.m4a"));
            incorrect->play();

            QMessageBox message;
            message.setText("Sorry!!. The details entered does not exist, please try again.");
            message.exec();
            this->show();
            connClose();

        }

       }

    }
}






